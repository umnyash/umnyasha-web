extends ../../layout/layout

block variables
  - var title = 'Обработка ошибок и исключений.'
  - var pageClass = 'article-page'

block content
  main
    article.article.container
      h1= title
      h2 Ошибки.
      p Когда возникает ошибка, JavaScript генерирует объект, содержащий её детали.
      p В JavaScript есть множество встроенных конструкторов для стандартных ошибок:
      ul
        li #[b new Error(сообщение)].
        li #[b new SyntaxError(сообщение)].
        li #[b new ReferenceError(сообщение)].
        li #[b new TypeError(сообщение)].
      p Для встроенных ошибок, свойство #[b name] — это в точности имя конструктора, а свойство #[b message] берётся из аргумента.
      h2 Оператор "throw".
      p Оператор #[b throw] генерирует #[i исключение].
      pre
        code.
          throw значение
      p Значением исключения может быть что угодно, но всё же лучше, чтобы это был объект, желательно со свойствами #[b name] и #[b message] (для совместимости со встроенными ошибками).
      h2 "try..catch".
      p Конструкция #[b try...catch] позволяет ловить ошибки и исключения и предотвратить остановку выполнения программы при возможности их обработать.
      pre
        code.
          try {
            // исполняемый код
            // если случится ошибка, управление сразу же перейдёт в блок catch
          } catch (err) {
            // в параметр блока catch передаётся ошибка или значение исключения
          } finally {
            // выполняется всегда после try/catch
          }
      p Блок #[b catch] должен обрабатывать только те ошибки и исключения, которые ему известны и «пробрасывать» все остальные.
      p Секций #[b catch] или #[b finally] может не быть, то есть более короткие конструкции #[b try..catch] и #[b try..finally] также корректны.

extends ../../layout/layout

block variables
  - var title = 'Основы CSS.'
  - var pageClass = 'article-page'

block content
  main
    article.article.article--with-navigation.container
      h1= title
      nav
        ol
          li #[a(href='#what-is-css') Что такое CSS?]
          li #[a(href='#syntax-css') Синтаксис CSS.]
            ol
              li #[a(href='#selectors') Селекторы.]
              li #[a(href='#properties-and-values') Свойства и значения.]
                ol
                  li #[a(href='#compound-properties') Составные свойства.]
                  li #[a(href='#units-of-measurement') Единицы измерения: абсолютные и относительные.]
                  li #[a(href='#magnitude-of-angle') Величина угла.]
                  li #[a(href='#color-formats') Форматы цвета.]
                  li #[a(href='#function-values') Значения-функции.]
                  li #[a(href='#global-values') Глобальные значения.]
              li #[a(href='#comments') Комментарии.]
          li #[a(href='#built-in-styles') Встроенные стили.]
            ol
              li #[a(href='#connecting-styles-inside-style-tag') Подключение стилей внутри тега style.]
              li #[a(href='#connecting-styles-inside-style-attribute') Подключение стилей внутри атрибута style.]
          li #[a(href='#default-styles') Стили по умолчанию.]
          li #[a(href='#hierarchical-tree') Иерархическое дерево.]
          li #[a(href='#inheritance') Наследование.]
            ol
              li #[a(href='#inherited-properties') Наследуемые свойства.]
              li #[a(href='#non-inherited-properties') Ненаследуемые свойства.]
              li #[a(href='#forced-inheritance') Принудительное наследование.]
          li #[a(href='#cascading') Каскадирование.]
            ol
              li #[a(href='#conflict-of-properties') Конфликт свойств.]
              li #[a(href='#most-specific-selector') Самый специфичный селектор.]
              li #[a(href='#rules-with-highest-priority') Правила с наивысшим приоритетом.]
              li #[a(href='#calculation-of-specificity') Расчёт специфичности.]
          li #[a(href='#class-attribute') Атрибут class.]
            ol
              li #[a(href='#mixing-classes') Миксование классов.]
          li #[a(href='#namespaces') Пространства имён.]
      h2#what-is-css Что такое CSS?
      p #[dfn CSS (Cascading Style Sheets)] — каскадные таблицы стилей.
      p Это язык для оформления структурированных документов, например, HTML-документов.
      p С помощью CSS можно задавать параметры отображения любого тега.
      p #[a(href='https://www.w3.org' target='_blank' rel='nofollow noopener') Спецификация].
      p #[a(href='https://doka.guide/css' target='_blank' rel='nofollow noopener') Справочник на русском].
      h2#syntax-css Синтаксис CSS.
      p Синтаксис CSS — это плоский список правил CSS-правил.
      p CSS-правило состоит из селектора и перечня свойств и их значений.
      pre
        code.
          селектор {
            свойство: значение;
            свойство: значение;
          }
      p Список CSS-правил мы называем плоским, потому что в чистом CSS их нельзя вкладывать в друг друга. Возможно, в новых версиях языка эту возможность добавят.
      p Помимо CSS-правил (rule sets) в языке существуют так называемые «эт-правила» (at-rules), они начинаются с символа #[b @], например, #[b @font-face]. «Эт-правила» ещё называют CSS-директивами.
      h3#selectors Селекторы.
      p Селектор находится в начале CSS-правила, до фигурных скобок, и определяет к каким HTML-элементам применятся свойства и значения из правила.
      p Простейшие (и самые популярные) селекторы — это селекторы по тегам и классам. Селекторы по тегам содержат имя тега без символов #[b &lt;] и #[b &gt;], и применяются ко всем подходящим тегам. Селекторы по классам начинаются с точки, за которой идёт имя класса, и применяются ко всем тегам с подходящим атрибутом #[b class].
      p Например:
      pre
        code.
          h1 { /* Выберет все заголовки 1 уровня */
            свойство: значение;
          }

          .info { /* Выберет только элементы с классом info */
            свойство: значение;
          }
      p Если у CSS-правил отличаются только селекторы, а свойства и значения одинаковые, то их можно сгруппировать через запятую.
      p Например:
      pre
        code.
          h1, .danger {
            color: red;
          }

          /* То же самое, что и: */

          h1 {
            color: red;
          }

          .danger {
            color: red;
          }
      p #[a(href='selectors.html') Все селекторы].
      h3#properties-and-values Свойства и значения.
      p Список свойств и значений находится внутри фигурных скобок CSS-правила. Пары «свойство-значение» отделяются друг от друга точкой с запятой, а свойство от значения отделяется двоеточием.
      p С помощью CSS можно задавать параметры отображения любого тега. Свойство определяет, какую характеристику внешнего вида мы хотим изменить, а значение — как именно.
      h4#compound-properties Составные свойства.
      p В CSS есть простые свойства, управляющие одним параметром отображения, и есть составные свойства, управляющие одновременно несколькими параметрами.
      p Например, свойство #[a(href='../css-properties/font-size.html') font-size] — простое, оно управляет только размером шрифта. А свойство #[a(href='../css-properties/font.html') font] — составное, оно задаёт сразу шесть параметров: размер и название шрифта, высоту строки и некоторые другие. Браузер всегда раскладывает составные свойства на простые.
      p Например, это составное свойство:
      pre
        code.
          font: 16px/26px "Arial", sans-serif;
      p Браузер разложит в такой набор простых свойств и их значений:
      pre
        code.
          font-size: 16px;                   /* Было задано в font. */
          line-height: 26px;                 /* Было задано в font. */
          font-family: "Arial", sans-serif;  /* Было задано в font. */
          font-weight: normal;               /* Не было задано в font. */
          font-style: normal;                /* Не было задано в font. */
          font-variant: normal;              /* Не было задано в font. */
      p #[strong Составное свойство #[em всегда] задаёт значения #[em всем] своим компонентам. Для незаданных явно компонентов используются исходные значения.]
      h4#units-of-measurement Единицы измерения: абсолютные и относительные.
      p #[i Абсолютные] единицы измерения привязаны к настоящим физическим размерам и связаны между собой жёсткими пропорциями.
      ul
        li #[b px] — пиксель.
        li #[b in] — дюйм (1 дюйм равен 2.54 см).
        li #[b cm] — сантиметр.
        li #[b mm] — миллиметр.
        li #[b pt] — пункт (1 пункт равен 1/72 дюйма).
        li #[b pc] — пика (1 пика равна 12 пунктам).
      p #[i Относительные] единицы измерения описывают значения, которые зависят от других значений.
      ul
        li #[b em] — размер шрифта текущего элемента.
        li #[b ex] — высота символа «x» текущего элемента.
        li #[b ch] — ширина символа «0» текущего элемента.
        li #[b rem] — размер шрифта корневого элемента (обычно #[b &lt;html&gt;&lt;/html&gt;]).
        li #[b vw] — 1% от ширины окна браузера.
        li #[b vh] — 1% от высоты окна браузера.
        li #[b vmin] — меньшее из значений #[b vw] и #[b vh].
        li #[b vmax] — большее из значений #[b vw] и #[b vh].
      p Проценты (#[b %]) вычисляются по-разному в зависимости от того, в каком свойстве используются. Например, ширина вычислится от ширины родителя, размер шрифта — от размера шрифта родителя, внутренний вертикальный отступ — от ширины родителя, а не от высоты.
      p При отрисовке страницы все относительные значения превращаются в абсолютные, иначе страницу просто не отрисовать.
      h4#magnitude-of-angle Величина угла.
      p Значение угла задаётся в #[b deg] (сокращение от «degree»).
      h4#color-formats Форматы цвета.
      ul
        li Ключевое слово. #[b yellow]
        li Шестнадцатиричное число. #[b #ffffff].
        li RGB. #[b rgb(255, 0, 0)].
        li RGBa. #[b rgb(255, 0, 0, 0.5)].
        li HSL. #[b hsl(359, 100%, 50%)].
        li HSLa. #[b hsla(120, 100%, 50%, 0.3)].
      p Прозрачный цвет можно задать ключевым словом #[b transparent].
      p Значение #[b currentColor] равняется значению свойства #[a(href='../css-properties/color.html') color] элемента.
      ul
        li #[a(href='https://www.w3.org/TR/css-color-3/#svg-color' target='_blank' rel='nofollow noopener') Полный список ключевых слов].
        li #[a(href='https://habr.com/ru/articles/189766' target='_blank' rel='nofollow noopener') Теория цвета в цифрах (Хабр)].
        li #[a(href='https://www.w3schools.com/html/html_colors.asp' target='_blank' rel='nofollow noopener') Подробнее о цветах].
      h4#function-values Значения-функции.
      ul
        li #[b attr()] — возвращает содержимое атрибута.
        li #[b calc()] — вычисляет значение и возвращает его.
        li #[b linear-gradient()] — линейный градиент.
      p Пример:
      pre
        code.
          a::before {
            content: attr(href);
            width: calc(100% - 100px);
            background-image: linear-gradient(black, blue);
          }
      h4#global-values Глобальные значения.
      ul
        li #[b inherit] — наследование.
        li #[b initial] — отменяет наследование и устанавливает значение по умолчанию.
        li #[b unset] — если наследование происходит от родителя, то наследуется. Если нет — сбрасывается до значения по умолчанию.
      h3#comments Комментарии.
      p Код, заключённый между символами #[b /*] и #[b */] работать не будет.
      h2#built-in-styles Встроенные стили.
      p Помимо подключения стилей через тег #[b &lt;link&gt;], существует ещё один способ — встраивание прямо в документе. Стили подключаются либо внутри тега #[b &lt;style&gt;&lt;/style&gt;], либо прописываются в значении атрибута #[b style] самих HTML-элементов.
      h3#connecting-styles-inside-style-tag Подключение стилей внутри тега style.
      p Вариант подключения стилей в теге #[b &lt;style&gt;&lt;/style&gt;] используется чаще всего для оптимизации загрузки страницы, ведь в таком случае браузер не будет отправлять дополнительные запросы на сервер. Тег #[b &lt;style&gt;&lt;/style&gt;] обычно размещают внутри #[b &lt;head&gt;&lt;/head&gt;]. Например:
      pre
        code.
          &lt;head&gt;
            &lt;style&gt;
              CSS-код
            &lt;/style&gt;
          &lt;/head&gt;
      h3#connecting-styles-inside-style-attribute Подключение стилей внутри атрибута style.
      p Второй вариант встраивания стилей — содержимое атрибута #[b style]. Свойства и значения, прописанные таким образом, применятся точечно к одному элементу:
      pre
        code.
          &lt;div style="width: 58%"&gt;...&lt;/div&gt;
      p Обычно использование этого способа считается плохой практикой, но иногда в виде исключения бывает удобнее воспользоваться встраиванием стилей в атрибут #[b style], чем писать отдельные CSS-правила. Например, когда нужно управлять стилями именно из разметки, и создавать отдельные классы при этом будет излишне. Так бывает, когда какие-то стилевые параметры устанавливаются с помощью сторонних программ или другими людьми, например, через CMS.
      h2#default-styles Стили по умолчанию.
      p Внутри браузеров для некоторых элементов хранятся стили, это браузерные стили по умолчанию.
      p #[a(href='https://www.w3schools.com/cssref/css_default_values.asp' target='_blank' rel='nofollow noopener') Полный список встроенных стилей].
      p Браузерные стили могут немного различаться в разных браузерах.
      h2#hierarchical-tree Иерархическое дерево.
      p Иерархическое дерево схематически отображает структуру вложенности элементов. У каждого HTML-элемента (кроме корневого) есть только один родитель, то есть элемент, внутри которого он располагается.
      p Иерархическая структура документа определяет основы концепции наследования.
      h2#inheritance Наследование.
      p Наследование в CSS — это механизм, с помощью которого значения свойств элемента-родителя передаются его элементам-потомкам.
      p Стили, присвоенные одному элементу, наследуются всеми потомками (вложенными элементами), но только в том случае, если они где-то явно не переопределены. Например, размер шрифта и его цвет достаточно применить к #[b &lt;body&gt;&lt;/body&gt;], чтобы большинство элементов внутри имели те же свойства.
      p Рассмотрим пример наследования:
      pre
        code.
          body {
            font-size: 14px;
          }

          nav {
            font-size: 18px;
          }
      p Размер шрифта у всего текста на странице, кроме текста внутри навигации, станет равен #[b 14px]. У #[b &lt;nav&gt;&lt;/nav&gt;] есть своё объявленное значение размера шрифта (#[b 18px]), и оно будет использоваться вместо наследуемого от #[b &lt;body&gt;&lt;/body&gt;] значения (#[b 14px]). А ещё #[b 18px] станет новым наследуемым значением для потомков #[b &lt;nav&gt;&lt;/nav&gt;].
      p Если на странице из примера будут заголовки, то их размер тоже будет отличаться от #[b 14px]. Дело в том, что размер для заголовков явно задан внутри браузерных стилей по умолчанию, поэтому наследуемое от #[b &lt;body&gt;&lt;/body&gt;] значение им не нужно.
      p Наследование позволяет сократить размер таблицы стилей, но если стилей много, то отследить какой родительский элемент установил некоторое свойство, становится сложнее.
      h3#inherited-properties Наследуемые свойства.
      p Не все свойства в CSS наследуются. К наследуемым относятся, в основном, свойства, определяющие параметры отображения текста: #[a(href='../css-properties/font-size.html') font-size], #[a(href='../css-properties/font-family.html') font-family], #[a(href='../css-properties/font-style.html') font-style], #[a(href='../css-properties/font-weight.html') font-weight], #[a(href='../css-properties/color.html') color], #[a(href='../css-properties/text-align.html') text-align], #[a(href='../css-properties/text-transform.html') text-transform], #[a(href='../css-properties/text-indent.html') text-indent], #[a(href='../css-properties/line-height.html') line-height], #[a(href='../css-properties/letter-spacing.html') letter-spacing], #[a(href='../css-properties/word-spacing.html') word-spacing], #[a(href='../css-properties/white-space.html') white-space], #[a(href='../css-properties/direction-and-unicode-bidi.html') direction] и другие.
      p Также к наследуемым свойствам относятся #[a(href='../css-properties/list-style.html') list-style], #[a(href='../css-properties/cursor.html') cursor], #[a(href='../css-properties/visibility.html') visibility], #[a(href='../css-properties/border-collapse.html') border-collapse] и некоторые другие. Но они используются реже.
      p Наследуемые свойства можно и нужно задавать через предков, следуя структуре документа.
      p Например, параметры текста зачастую не меняются в пределах крупных блоков страницы: меню, основного содержания, информационных панелей. Поэтому общие параметры текста (цвет, размер, гарнитура) обычно указывают в стилях этих крупных блоков.
      p Весь список наследуемых свойств вы можете найти в #[a(href='https://www.w3.org/TR/CSS22/propidx.html' target='_blank' rel='nofollow noopener') стандарте СSS]. Если в колонке #[b Inherited?] напротив свойства стоит #[b yes], то свойство наследуемое, иначе ненаследуемое.
      h3#non-inherited-properties Ненаследуемые свойства.
      p Основные ненаследуемые свойства — это параметры позиционирования, размеров, отступов, фона, рамок: #[a(href='../css-properties/background.html') background], #[a(href='../css-properties/border.html') border], #[a(href='../css-properties/padding.html') padding], #[a(href='../css-properties/margin.html') margin], #[a(href='../css-properties/width.html') width], #[a(href='../css-properties/height.html') height], #[a(href='../css-properties/position.html') position] и другие.
      p Не наследуются они из соображений здравого смысла. Например, если для какого-либо блока установлен внутренний отступ, автоматически выставлять такой же отступ каждому вложенному элементу нет никакой надобности. Эти параметры чаще всего уникальны для каждого отдельного блока.
      h3#forced-inheritance Принудительное наследование.
      p Для каждого свойства может быть задано значение #[b inherit]. Оно означает, что данное свойство принимает такое же значение, как и у родительского элемента. Значение #[b inherit] может быть использовано для усиления наследуемых значений, а также в свойствах, которые обычно не наследуются.
      h2#cascading Каскадирование.
      p #[dfn Каскадность] — это механизм комбинирования стилей из разных источников в итоговый набор свойств и значений для каждого тега.
      p Имеются три основные концепции, управляющие порядком, в котором применяются CSS-свойства:
      ol
        li Важность.
        li Специфичность.
        li Порядок исходного кода.
      h3#conflict-of-properties Конфликт свойств.
      p На один элемент могут действовать несколько CSS-правил. Если в этих правилах есть #[em одинаковые свойства с разными значениями], то возникает конфликт, ведь у свойства может быть только одно значение.
      p Браузеру нужно как-то решать, какими будут итоговые значения конфликтующих свойств. Конфликт разрешается максимум за три шага. Если на текущем шаге определиться не удалось, то выполняется следующий шаг. Вот эти шаги:
      ol
        li Сравниваются приоритеты стилевых файлов, в которых находятся конфликтующие свойства. Например, #[em авторские] (то есть наши) стили приоритетнее браузерных.
        li Сравнивается специфичность селекторов у CSS-правил с конфликтующими свойствами. Например, селектор по классу более специфичен, чем селектор по тегу.
        li Побеждает то свойство, которое находится ниже в коде.
      h3#most-specific-selector Самый специфичный селектор.
      p Особенность атрибута #[b id] заключается в том, что его значение должно быть уникальным в пределах страницы. То есть, может существовать только один тег с определённым значением #[b id].
      p Получается, что селектор по #[b id] может выбрать только один элемент. И поэтому он на порядок специфичнее селекторов по тегам, классам, а также комбинаций этих селекторов.
      h3#rules-with-highest-priority Правила с наивысшим приоритетом.
      p CSS-правила, которые прописаны в атрибуте #[b style] элемента, обладают наивысшим приоритетом.
      p Однако существует способ переопределить их из подключаемых CSS-файлов. Для этого нужно использовать ключевое слово #[b !important]. Оно задаёт CSS-свойству усиленный приоритет.
      p Пример:
      pre
        code.
          &lt;!-- HTML --&gt;
          &lt;p style="color: red;" class="blue"&gt;Синий или красный?&lt;/p&gt;

          /* CSS */
          .blue {
            color: blue !important;
          }
      p Цвет текста в этом примере будет синим.
      p При вёрстке не рекомендуется часто использовать #[b !important]. По возможности старайтесь обходиться без него.
      h3#calculation-of-specificity Рассчёт специфичности.
      p Чем меньшее количество элементов потенциально может выбрать селектор, тем он специфичнее.
      p Специфичность селектора разбивается на 4 группы: #[b a], #[b b], #[b c], #[b d]:
      ul
        li Если стиль встроенный, то есть определён как #[b style="..."], то #[b a] равно #[b 1], иначе — #[b 0].
        li Значение #[b b] равно количеству идентификаторов (тех, которые начинаются с #[b #]) в селекторе.
        li Значение #[b c] равно количеству классов, псевдоклассов и селекторов атрибутов.
        li Значение #[b d] равно количеству селекторов типов элементов и псевдо-элементов.
      p После этого полученное значение часто записывают в виде числа. Например, #[b 0,1,0,0] записывают как #[b 100], а #[b 0,0,1,0] — как #[b 10]. Селектор, обладающий большим значением специфичности, обладает и большим приоритетом.
      p Примеры:
      .table-wrapper
        table
          caption Основные символы для типографики:
          thead
            tr
              th Селектор
              th a, b, c, d
              th Число
          tbody(style='text-align: center;')
            tr
              th span
              td 0, 0, 0, 1
              td 1
            tr
              th div.cat-in-box
              td 0, 0, 1, 1
              td 11
            tr
              th #floor.cat-in-box
              td 0, 1, 1, 0
              td 110
            tr
              th div span
              td 0, 0, 0, 2
              td 2
            tr
              th .cat-in-box
              td 0, 0, 1, 0
              td 10
            tr
              th #floor span
              td 0, 1, 0, 1
              td 101
      p Отсюда сразу видно, что в нашем примере самым приоритетным является селектор #[b #floor.cat-in-box].
      p #[strong Несмотря на удобство, запись в виде числа может вводить в заблуждение. Важно учитывать, что #[b 0,1,10,0] не превращается в #[b 200], а двадцать селекторов по тегу имеют меньшую специфичность, чем один селектор по классу.].
      h2#class-attribute Атрибут class.
      p Элементы в HTML можно объединять в классы.
      p Имя класса должно начинаться с латинской буквы и может содержать в себе латинские буквы, цифры, символы #[b -] и #[b _].
      p Чтобы добавить элемент в класс, нужно записать имя этого класса в атрибут #[b class].
      p Пример:
      pre
        code.
          &lt;div class="highlight"&gt;
            ...
          &lt;/div&gt;
      h3#mixing-classes Миксование классов.
      p Каждый HTML-элемент может относиться к неограниченному числу классов, в этом случае их имена перечисляются в атрибуте #[b class] через пробел. Например:
      pre
        code.
          &lt;div class="class-1 class-2 class-3"&gt;...&lt;/div&gt;
      p Использование нескольких классов — это типовой приём, который ещё называется миксованием классов. Обычно его используют так: в один класс выносят общее оформление, а в дополнительных классах описывают его модификации.
      h2#namespaces Пространства имён.
      p Пространство имён — это способ написания селекторов, позволяющий эффективно отделять друг от друга стили, относящиеся к разным блокам.
      p Пространство имён можно создать с помощью контекстных селекторов.
      p Примеры:
      pre
        code.
          .main-menu li { ... }
          .main-menu a {...}

          .contacts .item { ... }
          .contacts .title { ... }
      p Другой вариант создания пространства имён заключается в добавлении префикса к названию каждого класса.
      p Примеры:
      pre
        code.
          .contacts-item { ... }
          .contacts-title {...}

          .social-vk { ... }
          .social-fb { ... }
          .social-tw { ... }
      p Оба способа хороши и используются в зависимости от предпочтений. Самое главное — использовать пространства имён.

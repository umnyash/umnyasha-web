extends ../../layout/layout

block variables
  - var title = 'Псевдокласс nth-child.'
  - var pageClass = 'article-page'

block content
  main
    article.article.container
      h1= title
      p Псевдокласс #[b nth-child] выбирает элемент по порядковому номеру, который отсчитывается с начала.
      p В качестве аргумента принимает положительное число, ключевое слово или выражение со счётчиком.
      p Ключевые слова:
      ul
        li #[b even] — все чётные номера.
        li #[b odd] — все нечётные номера.
      p Примеры:
      pre
        code.
          li:nth-child(1) { ... }   /* 1-й тег li в списке. */
          li:nth-child(4) { ... }   /* 4-й тег li в списке. */
          li:nth-child(odd) { ... } /* 1-й, 3-й, 5-й и т.д. */
      h2 Использование счётчика.
      p Счётчик #[b n] принимает целые значения, начиная с нуля: #[b 0], #[b 1], #[b 2], #[b 3], #[b 4] и так далее.
      h3 Выбор каждого n-ного элемента.
      p Рассмотрим пример вычисления номеров для выбора каждого второго элемента:
      pre
        code.
          li:nth-child(2n) { ... }
      p Вычисление номеров элементов:
      ul
        li #[b n = 0] ➝ #[b 2 * 0] ➝ #[b 0] (нет элементов)
        li #[b n = 1] ➝ #[b 2 * 1] ➝ #[b 2] (2-й элемент)
        li #[b n = 2] ➝ #[b 2 * 2] ➝ #[b 4] (4-й элемент)
        li #[b n = 3] ➝ #[b 2 * 3] ➝ #[b 6] (6-й элемент)
        li ...
      p Таким образом, выражение #[b 2n] выбирает каждый второй (чётный) элемент, так же как ключевое слово #[b even].
      p Используя разные стили для чётных и нечётных элементов, можно создавать интересные визуальные эффекты. Именно таким образом, с помощью чистого CSS, делают полосатые таблицы.
      h3 Выбор каждого n-ного элемента со сдвигом.
      h4 Выбор нечётных элементов.
      p Посчитаем номера для #[b 2n + 1]:
      ul
        li #[b n = 0] ➝ #[b 2 * 0 + 1] ➝ #[b 1] (1-й элемент)
        li #[b n = 1] ➝ #[b 2 * 1 + 1] ➝ #[b 3] (3-й элемент)
        li #[b n = 2] ➝ #[b 2 * 2 + 1] ➝ #[b 5] (5-й элемент)
        li #[b n = 3] ➝ #[b 2 * 3 + 1] ➝ #[b 7] (7-й элемент)
        li ...
      p Выражение #[b 2n + 1] также как и #[b 2n] выбирает каждый второй элемент, но начинает не со второго элемента, а с первого. Это выражение равнозначно ключевому слову #[b odd].
      h4 Выбор каждого третьего элемента, начиная с первого.
      p Рассмотрим ещё один пример:
      pre
        code.
          li:nth-child(3n - 2) { ... }
      p Вычисление номеров элементов:
      ul
        li #[b n = 0] ➝ #[b 3 * 0 - 2] ➝ #[b -2] (нет элементов)
        li #[b n = 1] ➝ #[b 3 * 1 - 2] ➝ #[b 1] (1-й элемент)
        li #[b n = 2] ➝ #[b 3 * 2 - 2] ➝ #[b 4] (4-й элемент)
        li #[b n = 3] ➝ #[b 3 * 3 - 2] ➝ #[b 7] (7-й элемент)
        li ...
      p Выражение #[b 3n - 2] также как и #[b 3n] выбирает каждый третий элемент, но начинает не с третьего элемента, а с первого.
      h3 Выбор первых нескольких элементов.
      p Например, #[b -n + 2] выбирает только первые два элемента:
      ul
        li #[b n = 0] ➝ #[b 0 + 2] ➝ #[b 2] (2-й элемент)
        li #[b n = 1] ➝ #[b -1 + 2] ➝ #[b 1] (1-й элемент)
        li #[b n = 2] ➝ #[b -2 + 2] ➝ #[b 0] (нет элементов)
        li #[b n = 3] ➝ #[b -3 + 2] ➝ #[b -1] (нет элементов)
        li ...
      h3 Выбор всех элементов, кроме начальных.
      p Например, #[b n + 8] выбирает все элементы, начиная с восьмого:
      ul
        li #[b n = 0] ➝ #[b 0 + 8] ➝ #[b 8] (8-й элемент)
        li #[b n = 1] ➝ #[b 1 + 8] ➝ #[b 9] (9-й элемент)
        li #[b n = 2] ➝ #[b 2 + 8] ➝ #[b 10] (10-й элемент)
        li #[b n = 3] ➝ #[b 3 + 8] ➝ #[b 11] (11-й элемент)
        li ...
      h3 Комбинирование выражений.
      p Существует возможность задавать множество с помощью комбинирования псевдоклассов:
      p Рассмотрим пример выбора элементов в диапазоне 10–15:
      pre
        code.
          li:nth-child(n + 10):nth-child(-n + 15) { ... }
      ol
        li #[b n + 10] выберет все элементы, начиная с 10-го.
        li Из них выражению #[b -n + 15], которое выбирает первые 15 элементов, остаётся выбрать только элементы с 10-го по 15-й.
      p Можно комбинировать более двух выражений.
      p Пример:
      pre
        code.
          li:nth-child(n+4):nth-child(-n+18):nth-child(odd) { ... }
      p Этот селектор выберет нечётные элементы среди элементов с 4-го по 18-й включительно.
